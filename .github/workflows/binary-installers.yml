name: Create binary installers
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  pip-compile:
    strategy:
      fail-fast: false
      matrix:
        output-file:
          - py3.10-darwin-x86_64-reqs
          - py3.10-linux-x86_64-cuda-reqs
          - py3.10-windows-x86_64-cuda-reqs
        python-version:
          - '3.9'
          - '3.10'
        include:
          - output-file: py3.10-darwin-x86_64-reqs
            os: macos-12
            requirements-file: requirements-mac-mps-cpu.txt
          - output-file: py3.10-linux-x86_64-cuda-reqs
            os: ubuntu-22.04
            requirements-file: requirements-lin-cuda.txt
          - output-file: py3.10-windows-x86_64-cuda-reqs
            os: windows-2022
            requirements-file: requirements-win-colab-cuda.txt
    name: ${{ matrix.output-file }} on Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        id: checkout-sources
        uses: actions/checkout@v3

      - name: setup python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: install pip-tools
        id: install-pip-tools
        run: pip3 install pip-tools

      - name: debug output
        run: |
          pip3 -V
          python3 -V
          pip3 list

      - name: run pip-compile
        id: pip-compile
        run: pip-compile --allow-unsafe --generate-hashes --output-file=binary_installer/${{ matrix.output-file }}.txt binary_installer/requirements.in

      - name: Archive results
        id: archive-results
        uses: actions/upload-artifact@v3
        with:
          name: results_${{ matrix.output-file }}_${{ matrix.python-version }}
          path: binary_installer
